//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  #[sea_orm(unique)]
  pub wallet_address: String,
  pub name: String,
  pub email: String,
  pub created_at: DateTimeWithTimeZone,
  pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::expert_availability::Entity")]
  ExpertAvailability,
  #[sea_orm(has_many = "super::expert_profiles::Entity")]
  ExpertProfiles,
  #[sea_orm(has_many = "super::expert_stats::Entity")]
  ExpertStats,
  #[sea_orm(has_many = "super::shopper_profiles::Entity")]
  ShopperProfiles,
}

impl Related<super::expert_availability::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ExpertAvailability.def()
  }
}

impl Related<super::expert_profiles::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ExpertProfiles.def()
  }
}

impl Related<super::expert_stats::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ExpertStats.def()
  }
}

impl Related<super::shopper_profiles::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ShopperProfiles.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
